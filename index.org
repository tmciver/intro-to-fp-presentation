#+TITLE: An Introduction to Functional Programming
#+OPTIONS: toc:1, num:nil
#+REVEAL_ROOT: https://cdn.jsdelivr.net/npm/reveal.js@3.8.0
#+REVEAL_THEME: moon
#+REVEAL_EXTRA_CSS: ./css/fp.css

* What is Functional Programming?

** 
- Based on the lambda calculus (by Alfonzo Church) which predates computers!

** 
It depends on who you ask!
#+ATTR_REVEAL: :frag (appear)
[[./img/slightly-frowning-face.png]]

** 
#+REVEAL_HTML: <div class="column" style="float:left; width: 25%">
[[./img/hutton-twitter.jpg]]
[[./img/programming-in-haskell.jpg]]
#+REVEAL_HTML: </div>
#+REVEAL_HTML: <div class="column" style="float:right; width: 75%">
#+begin_quote
"functional programming can be viewed as a /style/ of programming in which the basic method of computation is the application of functions to arguments."

-- Graham Hutton
#+end_quote
#+ATTR_REVEAL: :frag (appear)
There must be more to the story than that . . .
#+REVEAL_HTML: </div>

** 
A more involved answer depends on whether we're talking about /pure/ or /impure/ FP.

** Impure FP
#+REVEAL_HTML: <div class="column" style="float:left; width: 75%">
#+BEGIN_QUOTE
"Functional programming is a programming paradigm [...] that treats computation as the evaluation of mathematical functions and avoids changing-state and mutable data."

-- Wikipedia
#+END_QUOTE
#+REVEAL_HTML: </div>

#+REVEAL_HTML: <div class="column" style="float:right; width: 25%">
#+ATTR_HTML: :alt Wikipedia Logo :title Wikipedia Logo
[[file:./img/220px-Wikipedia-logo-v2.svg.png]]
#+REVEAL_HTML: </div>

** Pure FP
#+REVEAL_HTML: <div class="column" style="float:left; width: 80%">
#+BEGIN_QUOTE
"purely functional programming usually designates a programming paradigm [...] that treats all computation as the evaluation of mathematical functions. Purely functional programming may also be defined by forbidding changing-state and mutable data."

-- Wikipedia
#+END_QUOTE
#+REVEAL_HTML: </div>

#+REVEAL_HTML: <div class="column" style="float:right; width: 20%">
#+ATTR_HTML: :alt Wikipedia Logo :title Wikipedia Logo
[[file:./img/220px-Wikipedia-logo-v2.svg.png]]
#+REVEAL_HTML: </div>

** Pure FP
#+REVEAL_HTML: <div class="column" style="float:left; width: 25%">
#+ATTR_HTML: :alt Runar Bjarnason's Twitter Photo :title Runar Bjarnason's Twitter Photo
[[file:./img/runar-bjarnason-twitter.png]]
[[./img/fp-in-scala-cover.jpg]]
#+REVEAL_HTML: </div>
#+REVEAL_HTML: <div class="column" style="float:right; width: 75%">
#+BEGIN_QUOTE
"Programming where your entire program is a single referentially transparent expression composed of other referentially transparent expressions."

-- Rúnar Bjarnason
#+END_QUOTE
#+REVEAL_HTML: </div>

** Referential What-Now?
[[./img/confused-mal.gif]]
#+ATTR_REVEAL: :frag (appear)
An expression is called referentially transparent if it can be replaced with its corresponding value without changing the program's behavior.

#+ATTR_REVEAL: :frag (appear)
This is actually a consequence of using pure functions.

** So What's a Pure Function?
#+ATTR_REVEAL: :frag (appear)
- Gives the same output for a given set of inputs
- Has no side effects

** OK Fine, What's a Side Effect?
#+ATTR_REVEAL: :frag (appear)
It's when a function has an observable effect /besides/ returning a value.
#+ATTR_REVEAL: :frag (appear)
Examples include
#+ATTR_REVEAL: :frag (appear)
- Any I/O (reads/writes)
- Modifying a variable

** FP Proponents Say Side Effects Bad!
[[./img/thumbs-down.jpeg]]
#+ATTR_REVEAL: :frag (appear)
In the presence of side effects, a program's behaviour may depend on history; that is, the order of evaluation matters.
#+ATTR_REVEAL: :frag (appear)
Understanding and debugging a function with side effects requires knowledge about the context and its possible histories.

** FP (Impure) Can Be Done In Any Language
#+ATTR_REVEAL: :frag (appear)
But that language should really have support for /first class/ functions.
#+ATTR_REVEAL: :frag (appear)
This means that functions are values like any other and can therefore be passed as arguments to other functions or returned from functions.

** First-Class Function Examples: JavaScript
#+HEADER: :exports both
#+begin_src js :results pp
setTimeout(function() {
  console.log("hello");
}, 3000);
#+end_src

#+HEADER: :exports both
#+begin_src js :results pp
var greeter = function(greeting) {
  return function(name) {
    console.log(greeting + ", " + name);
  };
}
var helloGreeter = greeter("Hello")
helloGreeter("FP fans!")
#+end_src

** First-Class Functions Enable Higher-Order Functions
#+begin_src php
// PHP
function map(callable $f, array $l) {
  $result = [];
  foreach ($l as $v) {
    $result[] = $f($v);
  }
  return $result;
}

$inc = function($i) {
  return $i + 1;
};
map($inc, [1, 2, 3]);
// [2, 3, 4]
#+end_src

** FP Is Also Often Characterized By Use Of Recursion
#+HEADER: :exports both
#+begin_src python :results pp
# Python
def factorial(n):
  return 1 if (n == 0) else n * factorial(n - 1)

return factorial(5)
#+end_src
#+RESULTS:

* Versus Imperative Programming

** Functional Programming Is An Example of the Declarative Paradigm
#+ATTR_REVEAL: :frag (appear)
- It is based on the use of expressions or declarations
- contrasts with the imperative paradigm (the use of statements to change program state)

** Example: imperative
#+HEADER: :exports both
#+BEGIN_SRC python :results pp
# Python
chars = ['a', 'b', 'c']
upper_chars = []
for c in chars:
  upper_chars.append(c.upper())

return upper_chars
#+END_SRC
#+RESULTS:

** Example: functional
#+HEADER: :exports both
#+BEGIN_SRC python :results pp
# Python
chars = ['a', 'b', 'c']
upper_chars = [c.upper() for c in chars]

return upper_chars
#+END_SRC

#+RESULTS:

** Example: expressions vs. statements
In imperative languages, ~if~ / ~else~ is a statement:
#+begin_src java
// Java
String msg = "";
if (isMoving) {
  msg = "We're moving!";
} else {
  msg = "We're stopped.";
}
#+end_src
In functional languages, it's an expression.
#+begin_src scala
// Scala
val msg: String = if (isMoving)
                    "We're moving!"
                  else "We're stopped."
#+end_src

** Example: Factoring
#+begin_src python
// Python
in1 = read("some-file.txt")
write("some-file.txt", in1 + "new stuff.")
in2 = read("some-file.txt")
#+end_src

#+ATTR_REVEAL: :frag (appear)
#+begin_src haskell
-- Haskell
doIt = do
  in1 <- readFile("some-file.txt")
  writeFile("some-file.txt", in1 ++ "new stuff.")
  in2 <- readFile("some-file.txt")
  return in2
#+end_src

#+ATTR_REVEAL: :frag (appear)
#+begin_src haskell
-- Haskell
readSomeFile = readFile("some-file.txt")
doIt = do
  in1 <- readSomeFile
  writeFile("some-file.txt", in1 ++ "new stuff.")
  in2 <- readSomeFile
  return in2
#+end_src

* What is it Good For?

** It can give us:
#+ATTR_REVEAL: :frag (appear)
- [[https://www.wired.com/2016/09/computer-scientists-close-perfect-hack-proof-code/][Hack-proof code]]?
- Property-based testing (Quickcheck)
- Computer-assisted optimizations
- Computer-assisted parallelization
- Memoization potential

** 
Whole classes of bugs become /impossible/.
[[file:./img/dotnet-try-round-bug-scaled.png]]

* Uses in Industry
#+ATTR_REVEAL: :frag (appear)
- [[https://code.fb.com/security/fighting-spam-with-haskell/][Facebook's Spam Filters Written in Haskell]]
- [[https://www.fpcomplete.com/articles/whatsapp-erlang-haskell][WhatsApp Written in Erlang]]
- [[https://github.com/search?q=org:twitter&type=Repositories&utf8=%25E2%259C%2593][Some of Twitter Written in Scala]]
- [[https://www.janestreet.com/technology/][Jane Street uses OCaml]]
- [[https://github.com/github/semantic/blob/master/docs/why-haskell.md][Github uses Haskell for "Semantic"]]

** Why Github Uses Haskell for Semantic
#+begin_quote
"it's worth mentioning that Semantic, as a rule, does not encounter runtime crashes"
#+end_quote

** Why Github Uses Haskell for Semantic
#+begin_quote
"null pointer exceptions, missing-method exceptions, and invalid casts are entirely obviated, as Haskell makes it nigh-impossible to build programs that contain such bugs."
#+end_quote

** Why Github Uses Haskell for Semantic
#+begin_quote
"the fact that the Semantic Code team spends the majority of its time working on features rather than debugging production crashes is truly remarkable—and this can largely be attributed to our choice of language."
#+end_quote

* Start Using It Today!
#+ATTR_REVEAL: :frag (appear)
- Use higher-order functions instead of ~for~ loops
- Make data structures immutable

* Conclusion
