#+TITLE: An Introduction to Functional Programming
#+OPTIONS: toc:1, num:nil
#+REVEAL_ROOT: https://cdn.jsdelivr.net/npm/reveal.js@3.8.0
#+REVEAL_THEME: moon

* What is Functional Programming?

** 
#+begin_quote
"functional programming can be viewed as a /style/ of programming in which the basic method of computation is the application of functions to arguments."

-- Graham Hutton, author of "Programming in Haskell"
#+end_quote

** It is: an example of the declarative paradigm
#+ATTR_REVEAL: :frag (appear)
- i.e., it is based on the use of expressions or declarations
- contrasts with the imperative paradigm (the use of statements to change program state)

** Example: imperative
#+HEADER: :exports both
#+BEGIN_SRC python :results pp
# Python
chars = ['a', 'b', 'c']
upper_chars = []
for c in chars:
  upper_chars.append(c.upper())

return upper_chars
#+END_SRC
#+RESULTS:

** Example: functional
#+HEADER: :exports both
#+BEGIN_SRC python :results pp
# Python
chars = ['a', 'b', 'c']
upper_chars = [c.upper() for c in chars]

return upper_chars
#+END_SRC

#+RESULTS:

** Example: expressions vs. statements
In imperative languages, ~if~ / ~else~ is a statement:
#+begin_src java
// Java
String msg = "";
if (isMoving) {
  msg = "We're moving!";
} else {
  msg = "We're stopped.";
}
#+end_src
In functional languages, it's an expression.
#+begin_src scala
// Scala
val msg: String = if (isMoving)
                    "We're moving!"
                  else "We're stopped."
#+end_src

** 
Wikipedia says:
#+BEGIN_QUOTE
# #+ATTR_HTML: :alt Wikipedia Logo :title Wikipedia Logo
# [[file:./img/220px-Wikipedia-logo-v2.svg.png]]
"Functional programming is a programming paradigm that treats computation as the evaluation of mathematical functions and avoids changing-state and mutable data."
#+END_QUOTE
#+REVEAL: split
#+BEGIN_QUOTE
Purely functional programming may also be defined by forbidding changing-state and mutable data.
#+END_QUOTE

** Functions as First-class Citizens
(Higher Order Functions)
#+ATTR_REVEAL: :frag (appear)
- Functions returning functions
- Functions as function arguments

** Immutability
** Totality
** Referential Transparency
** No Side Effects
*** Always safe to evaluate independent expressions in parallel
** Category Theory

* What is it Good For?
** [[https://www.wired.com/2016/09/computer-scientists-close-perfect-hack-proof-code/][Hack-proof code]]?
** Property-based testing
** Computer-assisted optimizations
** Computer-assisted parallelization

* Examples

* Uses in Industry
** Facebooks Spam Filters Written in Haskell
** WhatsApp Written in Erlang
** Some of Twitter (what parts?) Written in Scala
** Jane Street uses OCaml
** Github uses Haskell for "semantic" application

* Conclusion
